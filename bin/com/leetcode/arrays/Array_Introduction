Array Introduction
What Is an Array?
-------------------------
An Array is a collection of similar items. items are stored in the contiguous 
memory location.

Creating an Array
-------------------------
Arrays can hold up to N items. The value of N is decided by you.
In Java, we use the following code to create an Array to hold up to 15 DVDs. 
Note that we've also included a simple definition of a DVD for clarity.
// The actual code for creating an Array to hold DVD's.
DVD[] dvdCollection = new DVD[15];

// A simple definition for a DVD.
public class DVD {
    public String name;
    public int releaseYear;
    public String director;

    public DVD(String name, int releaseYear, String director) {
        this.name = name;
        this.releaseYear = releaseYear;
        this.director = director;
    }

    public String toString() {
        return this.name + ", directed by " + this.director + ", released in " + this.releaseYear;
    }
}

Accessing Elements in Arrays
-------------------------------------
Writing Items into an Array--
*********************************
To put a DVD into the Array, we need to decide which of the 15 places we'd like it to go in. Each of the places is identified using a number in the range of 0 to N - 1.
The 1st place is 0, the 2nd place is 1, the 3rd place is 2... all the way up to the 15th place, which is 14.
We call these numbers that identify each place indexes.

// Firstly, we need to actually create a DVD object for The Avengers.
DVD avengersDVD = new DVD("The Avengers", 2012, "Joss Whedon");

// Next, we'll put it into the 8th place of the Array. Remember, because we
// started numbering from 0, the index we want is 7.
dvdCollection[7] = avengersDVD;

DVD incrediblesDVD = new DVD("The Incredibles", 2004, "Brad Bird");
DVD findingDoryDVD = new DVD("Finding Dory", 2016, "Andrew Stanton

dvdCollection[3] = incrediblesDVD;

// Put "Finding Dory" into the 10th place: index 9.
dvdCollection[9] = findingDoryDVD;

Notice that we put The Incredibles into the Array at index 3. What happens if we now run this next piece of code?


Because we just put Star Wars into the Array at index 3, The Incredibles is no longer in the Array. It has been overwritten!
If we still have the incrediblesDVD variable in scope, then the DVD still exists in the computer's memory. If not though, it's totally gone!

Reading Items from an Array
************************************
We can check what's at a particular Array index.
// Print out what's in indexes 7, 10, and 3.
System.out.println(dvdCollection[7]);
System.out.println(dvdCollection[10]);
System.out.println(dvdCollection[3]);

Notice that because we haven't yet put anything at index 10, the value it contains is null. In other languages, such as C, the Array slot could contain completely random data. Java always initializes empty Array slots to null if the Array contains objects, or to default values if it contains primitive types. 
For example, the array int [] would contain the default value of 0 for each element, float[] would contain default values of 0.0, and bool[] would contain default values of false.


Writing Items into an Array with a Loop
****************************************************
We commonly use a loop to put lots of values into an Array. To illustrate this, let's go to another example. 
This time, we're going to create an Array of ints and put the first 10 square numbers into it.
int[] squareNumbers = new int[10];

// Go through each of the Array indexes, from 0 to 9.
for (int i = 0; i < 10; i++) {
    // We need to be careful with the 0-indexing. The next square number
    // is given by (i + 1) * (i + 1).
    // Calculate it and insert it into the Array at index i.
    int square = (i + 1) * (i + 1);
    squareNumbers[i] = square;
}

Reading Items from an Array with a Loop
===================================================
We can also use a loop to print out everything that's in the Array.

// Go through each of the Array indexes, from 0 to 9.
for (int i = 0; i < 10; i++) {
    // Access and print what's at the i'th index.
    System.out.println(squareNumbers[i]);
}

// Will print:
// 1
// 4
// 9
// 16
// 25
// 36
// 49
// 64
// 81
// 100


One last thing worth knowing now is that there's a more elegant way of printing out the values of an Array—a variant of the for loop, commonly referred to as a "for each" loop.

// For each VALUE in the Array.
for (int square : squareNumbers) {
    // Print the current value of square.
    System.out.println(square);
}
// Prints exactly the same as the previous example.

******************************************
Array Capacity VS Length
******************************************
Array Capacity
=========================
Let's say we've created a new Array like this.

DVD[] array = new DVD[6]
Is it a valid operation to insert an element at array[6]? What about at array[10]?

Nope, neither of these are valid. When we created the Array, we specified that it can hold up to 6 DVD's. This is the Array's capacity.

Remembering that indexing starts at 0, we can only insert items at array[0], array[1], array[2], array[3], array[4], and array[5].
Trying to put an element anywhere else, such as array[-3], array[6], or array[100] will cause your code to crash with an ArrayIndexOutOfBoundsException!

The Array's capacity must be decided when the Array is created. The capacity cannot be changed later. 

The capacity of an Array in Java can be checked by looking at the value of its length attribute. 
This is done using the code arr.length, where arr is the name of the Array. 
Different programming languages have different ways of checking the length of an Array.

int capacity = array.length;
System.out.println("The Array has a capacity of " + capacity);

==========================
Array Length
==========================
The other definition of length is the number of DVDs, or other items, currently in the Array. This is something you'll need to keep track of yourself, 
and you won't get any errors if you overwrite an existing DVD, or if you leave a gap in the Array.

// Create a new array with a capacity of 6.
int[] array = new int[6];

// Current length is 0, because it has 0 elements.
int length = 0;

// Add 3 items into it.
for (int i = 0; i < 3; i++) {
    array[i] = i * i;
    // Each time we add an element, the length goes up by one.
    length++;
}

System.out.println("The Array has a capacity of " + array.length);
System.out.println("The Array has a length of " + length);


================================
Handling Array Parameters
===============================
Most Array questions on LeetCode have an Array passed in as a parameter, with no "length" or "capacity" parameter.

